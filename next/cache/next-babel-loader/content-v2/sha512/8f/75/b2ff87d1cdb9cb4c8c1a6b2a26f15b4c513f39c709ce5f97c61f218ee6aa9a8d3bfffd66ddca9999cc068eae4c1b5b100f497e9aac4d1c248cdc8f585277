{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rational/u00/repositorios/REACT-REPO/MSSR-NEXT-JS/src/components/checkoutBuy/Paypal/paypal.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport environment from '../../../environments/environments';\nimport Progressbar from '../../shared/spinner/progressbar';\nimport { withRouter, NextRouter } from 'next/router';\n\nclass Paypal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"API_URI\", environment.apiUrlAws);\n\n    _defineProperty(this, \"xApikey\", environment.xApikey);\n\n    _defineProperty(this, \"clientId\", environment.clientId);\n\n    this.state = {\n      id: \"\",\n      products: props.state.products,\n      detail: props.state.detail,\n      plan: props.state.nameprod,\n      duracion: props.state.duracion,\n      shopping: {},\n      phoneNumber: 0,\n      show: false\n    };\n  }\n  /*!=======================================================\n  * Nombre: componentDidMount\n  * Descripción: Se ejecuta antes del render\n  =========================================================*/\n\n\n  componentDidMount(props) {\n    const phoneNumber = localStorage.getItem('phoneNumber');\n    this.state.products.forEach(data => {\n      let shopping = {\n        \"categoria\": data.product,\n        \"currency\": data.currency,\n        \"duracion\": this.state.duracion\n      };\n      this.setState({\n        shopping: shopping,\n        phoneNumber: phoneNumber\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PayPalButton, {\n        options: {\n          clientId: this.clientId,\n          currency: \"USD\" //vault:true //Si la transacción establece un acuerdo de facturación o utiliza una bóveda.\n\n        },\n        disableCard: true,\n        style: {\n          shape: 'rect',\n          color: 'gold',\n          layout: 'vertical',\n          label: 'pay'\n        },\n        createOrder: (data, actions) => {\n          // Call your server to save the transaction\n          return fetch(`${this.API_URI}/checkout/order/paypal`, {\n            method: 'POST',\n            body: JSON.stringify(this.state.shopping),\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json, text/plain, */*',\n              'x-api-key': this.xApikey\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (data) {\n            return data.body.value; // the data is the order object returned from the api call, its not the BrainTree.Response object\n          }).catch(err => console.log('#Error#', err));\n        },\n        shippingPreference: \"NO_SHIPPING\" // preferencia de envío => default is \"GET_FROM_FILE\"\n        ,\n        onSuccess: (details, data) => {\n          if (details.status == \"COMPLETED\") {\n            //COMPLETED\n            let detalle = {}; //Variable local Storage\n\n            let detail_pay = {}; //Variable data a aguardar en BD\n\n            detalle['id'] = details.id;\n            details.purchase_units.forEach(data => {\n              detalle['currency_code'] = data.amount.currency_code;\n              detalle['value'] = data.amount.value;\n              detail_pay['value'] = data.amount.value;\n              detail_pay['duration'] = this.state.duracion;\n              detail_pay['method'] = \"Paypal\";\n              detail_pay['status'] = details.status;\n              detail_pay['category'] = this.state.shopping.categoria;\n              detail_pay['client_id'] = this.state.phoneNumber;\n              detail_pay['detail'] = details;\n            }); // Call your server to save the transaction\n\n            return fetch(`${this.API_URI}/purchases`, {\n              method: 'POST',\n              body: JSON.stringify(detail_pay),\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'x-api-key': this.xApikey\n              }\n            }).then(res => {\n              res.json();\n              localStorage.setItem('detalle', JSON.stringify(detalle)); //Redirect\n\n              this.props.router.push({\n                pathname: `/order/payment/${details.status}`\n              }); //this.props.router.replace(`/order/payment/${details.status}`);\n              //this.props.history.push(`/order/payment/${details.status}`);\n              //this.props.history.replace(`/order/payment/${details.status}`);\n            }).catch(err => console.log('ERROR', err));\n          }\n        } //Si un error impide el pago por parte del comprador. \n        //Este manejador de errores es un comodín. \n        //No se espera que los errores en este punto se manejen más allá de mostrar un mensaje de error genérico o una página.\n        ,\n        onError: err => {\n          console.log(\"onError:\", err); //Redirect\n\n          this.props.router.push({\n            pathname: \"/order/payment/ERROR\",\n            state: {\n              message: 'ERROR'\n            }\n          }); //this.props.history.push(\"/order/payment/ERROR\", { state: {message:'ERROR'}}); \n          //this.props.history.replace('/order/payment/ERROR');\n        } // onCancel => Muestre una página de cancelación o regrese al carrito de compras.\n        ,\n        onCancel: data => {\n          //alert(\"Transacción cancelación,regresando al carrito de compras \");\n          this.props.router.push(\"/order/payment/ERROR\"); //this.props.router.replace('/order/payment/ERROR');\n        } // catchError => Transacción rechazada o con errores. \n        ,\n        catchError: err => {\n          console.log(\"catchError:\", err); //Redirect\n\n          this.props.router.push(\"/order/payment/ERROR\", {\n            state: {\n              message: 'ERROR'\n            }\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default withRouter(Paypal);","map":{"version":3,"sources":["/Users/rational/u00/repositorios/REACT-REPO/MSSR-NEXT-JS/src/components/checkoutBuy/Paypal/paypal.js"],"names":["React","Component","PayPalButton","environment","Progressbar","withRouter","NextRouter","Paypal","constructor","props","apiUrlAws","xApikey","clientId","state","id","products","detail","plan","nameprod","duracion","shopping","phoneNumber","show","componentDidMount","localStorage","getItem","forEach","data","product","currency","setState","render","shape","color","layout","label","actions","fetch","API_URI","method","body","JSON","stringify","headers","then","res","json","value","catch","err","console","log","details","status","detalle","detail_pay","purchase_units","amount","currency_code","categoria","setItem","router","push","pathname","message"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport environment from '../../../environments/environments';\nimport Progressbar from '../../shared/spinner/progressbar'\nimport { withRouter, NextRouter } from 'next/router'\n\nclass Paypal extends Component {\n  API_URI = environment.apiUrlAws;\n  xApikey = environment.xApikey;\n  clientId = environment.clientId;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      products: props.state.products,\n      detail: props.state.detail,\n      plan: props.state.nameprod,\n      duracion: props.state.duracion,\n      shopping: {},\n      phoneNumber: 0,\n      show: false\n    };\n  }\n  \n  /*!=======================================================\n  * Nombre: componentDidMount\n  * Descripción: Se ejecuta antes del render\n  =========================================================*/\n  componentDidMount(props) {\n  const phoneNumber = localStorage.getItem('phoneNumber');\n  this.state.products.forEach(data=> {\n    let shopping={ \"categoria\":data.product,\"currency\":data.currency,\"duracion\":this.state.duracion}\n    this.setState({\n      shopping:shopping,\n      phoneNumber: phoneNumber\n    });\n   });\n}\n\n    \n  render() {\n    return (\n      <div>\n        <PayPalButton\n          options={{\n            clientId: this.clientId,\n            currency: \"USD\",\n            //vault:true //Si la transacción establece un acuerdo de facturación o utiliza una bóveda.\n          }}\n          disableCard\n          style={{\n            shape: 'rect',\n            color: 'gold',\n            layout: 'vertical',\n            label: 'pay'\n            }}\n\n          createOrder={(data, actions) => {\n            // Call your server to save the transaction\n            return fetch(`${this.API_URI}/checkout/order/paypal`, {\n              method: 'POST',\n              body: JSON.stringify(this.state.shopping),\n              headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json, text/plain, */*',\n                'x-api-key': this.xApikey\n              }\n            }).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return data.body.value; // the data is the order object returned from the api call, its not the BrainTree.Response object\n            }).catch(err => console.log('#Error#', err))\n          }}\n\n\n          shippingPreference=\"NO_SHIPPING\" // preferencia de envío => default is \"GET_FROM_FILE\"\n          onSuccess={(details, data) => {\n           if(details.status == \"COMPLETED\"){\n            //COMPLETED\n            let detalle ={};//Variable local Storage\n            let detail_pay ={};//Variable data a aguardar en BD\n            detalle['id']=details.id;\n            details.purchase_units.forEach((data)=>{\n              detalle['currency_code']=data.amount.currency_code;\n              detalle['value']=data.amount.value;\n              detail_pay['value']=data.amount.value;\n              detail_pay['duration']=this.state.duracion;\n              detail_pay['method']=\"Paypal\";\n              detail_pay['status']=details.status;\n              detail_pay['category']=this.state.shopping.categoria;\n              detail_pay['client_id']=this.state.phoneNumber;\n              detail_pay['detail']=details;\n            })\n\n             // Call your server to save the transaction\n            return fetch(`${this.API_URI}/purchases`, {\n              method: 'POST',\n              body: JSON.stringify(detail_pay),\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'x-api-key': this.xApikey\n              }\n            }).then(res => {\n              res.json();\n              localStorage.setItem('detalle', JSON.stringify(detalle));\n              //Redirect\n              this.props.router.push({ pathname: `/order/payment/${details.status}`});\n              //this.props.router.replace(`/order/payment/${details.status}`);\n\n              //this.props.history.push(`/order/payment/${details.status}`);\n              //this.props.history.replace(`/order/payment/${details.status}`);\n            }).catch(err => console.log('ERROR', err))\n           }\n          }}\n\n          //Si un error impide el pago por parte del comprador. \n          //Este manejador de errores es un comodín. \n          //No se espera que los errores en este punto se manejen más allá de mostrar un mensaje de error genérico o una página.\n          onError={(err) => {\n            console.log(\"onError:\", err);\n            //Redirect\n            this.props.router.push({ pathname: \"/order/payment/ERROR\" ,  state: {message:'ERROR'}});\n\n            //this.props.history.push(\"/order/payment/ERROR\", { state: {message:'ERROR'}}); \n            //this.props.history.replace('/order/payment/ERROR');\n          }}\n\n          // onCancel => Muestre una página de cancelación o regrese al carrito de compras.\n          onCancel={(data) => {\n            //alert(\"Transacción cancelación,regresando al carrito de compras \");\n\n            this.props.router.push(\"/order/payment/ERROR\");\n            //this.props.router.replace('/order/payment/ERROR');\n\n          }}\n\n          // catchError => Transacción rechazada o con errores. \n          catchError={(err) => {\n             console.log(\"catchError:\", err)\n             //Redirect\n            \n             this.props.router.push(\"/order/payment/ERROR\", { state: {message:'ERROR'}});\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Paypal);"]},"metadata":{},"sourceType":"module"}