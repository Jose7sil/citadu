{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport environment from '../../../environments/environments';\nimport Progressbar from '../../shared/spinner/progressbar';\nimport { withRouter, NextRouter } from 'next/router';\n\nclass Paypal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"API_URI\", environment.apiUrlAws);\n\n    _defineProperty(this, \"xApikey\", environment.xApikey);\n\n    _defineProperty(this, \"clientId\", environment.clientId);\n\n    this.state = {\n      id: \"\",\n      products: props.state.products,\n      detail: props.state.detail,\n      plan: props.state.nameprod,\n      duracion: props.state.duracion,\n      shopping: {},\n      phoneNumber: 0,\n      show: false\n    };\n  }\n  /*!=======================================================\n  * Nombre: componentDidMount\n  * Descripción: Se ejecuta antes del render\n  =========================================================*/\n\n\n  componentDidMount(props) {\n    const phoneNumber = localStorage.getItem('phoneNumber');\n    this.state.products.forEach(data => {\n      let shopping = {\n        \"categoria\": data.product,\n        \"currency\": data.currency,\n        \"duracion\": this.state.duracion\n      };\n      this.setState({\n        shopping: shopping,\n        phoneNumber: phoneNumber\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(PayPalButton, {\n        options: {\n          clientId: this.clientId,\n          currency: \"USD\" //vault:true //Si la transacción establece un acuerdo de facturación o utiliza una bóveda.\n\n        },\n        disableCard: true,\n        style: {\n          shape: 'rect',\n          color: 'gold',\n          layout: 'vertical',\n          label: 'pay'\n        },\n        createOrder: (data, actions) => {\n          // Call your server to save the transaction\n          return fetch(`${this.API_URI}/checkout/order/paypal`, {\n            method: 'POST',\n            body: JSON.stringify(this.state.shopping),\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json, text/plain, */*',\n              'x-api-key': this.xApikey\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (data) {\n            return data.body.value; // the data is the order object returned from the api call, its not the BrainTree.Response object\n          }).catch(err => console.log('#Error#', err));\n        },\n        shippingPreference: \"NO_SHIPPING\" // preferencia de envío => default is \"GET_FROM_FILE\"\n        ,\n        onSuccess: (details, data) => {\n          if (details.status == \"COMPLETED\") {\n            //COMPLETED\n            let detalle = {}; //Variable local Storage\n\n            let detail_pay = {}; //Variable data a aguardar en BD\n\n            detalle['id'] = details.id;\n            details.purchase_units.forEach(data => {\n              detalle['currency_code'] = data.amount.currency_code;\n              detalle['value'] = data.amount.value;\n              detail_pay['value'] = data.amount.value;\n              detail_pay['duration'] = this.state.duracion;\n              detail_pay['method'] = \"Paypal\";\n              detail_pay['status'] = details.status;\n              detail_pay['category'] = this.state.shopping.categoria;\n              detail_pay['client_id'] = this.state.phoneNumber;\n              detail_pay['detail'] = details;\n            }); // Call your server to save the transaction\n\n            return fetch(`${this.API_URI}/purchases`, {\n              method: 'POST',\n              body: JSON.stringify(detail_pay),\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'x-api-key': this.xApikey\n              }\n            }).then(res => {\n              res.json();\n              localStorage.setItem('detalle', JSON.stringify(detalle)); //Redirect\n\n              this.props.router.push({\n                pathname: `/order/payment/${details.status}`\n              });\n            }).catch(err => console.log('ERROR', err));\n          }\n        } //Si un error impide el pago por parte del comprador. \n        //Este manejador de errores es un comodín. \n        //No se espera que los errores en este punto se manejen más allá de mostrar un mensaje de error genérico o una página.\n        ,\n        onError: err => {\n          console.log(\"onError:\", err); //Redirect\n\n          this.props.router.push(\"/order/payment/ERROR\");\n        } // onCancel => Muestre una página de cancelación o regrese al carrito de compras.\n        ,\n        onCancel: data => {} // catchError => Transacción rechazada o con errores. \n        ,\n        catchError: err => {\n          console.log(\"catchError:\", err); //Redirect\n\n          this.props.router.push(\"/order/payment/ERROR\");\n        }\n      })\n    });\n  }\n\n}\n\nexport default withRouter(Paypal);","map":null,"metadata":{},"sourceType":"module"}